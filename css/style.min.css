@charset "UTF-8";*{padding:0;margin:0;border:0}*,::after,::before{-webkit-box-sizing:border-box;box-sizing:border-box}:active,:focus,a:active,a:focus{outline:0}a,a:link,a:visited{display:inline-block}a,a:hover,a:link,a:visited{color:inherit;text-decoration:none}aside,footer,header,legend,main,nav,section{display:block}h2,h3,h4,h5,h6,p{font-size:inherit;font-weight:inherit}ul,ul li{list-style:none}img{vertical-align:top}img,svg{max-width:100%;height:auto}address{font-style:normal}input,select,textarea{background:0 0}button,input,select,textarea{font:inherit inherit;color:inherit}input::-ms-clear{display:none}button,input[type=submit]{display:inline-block;-webkit-box-shadow:none;box-shadow:none;background:0 0;cursor:pointer}button:active,button:focus,input:active,input:focus{outline:0}button::-moz-focus-inner{padding:0;border:0}label{cursor:pointer}.test-header{color:#ffdead;display:-webkit-box;display:-ms-flexbox;display:flex}span{font-size:10px}.test-footer{color:#f0f8ff;font-size:45px}footer,h1{font-size:32px}footer{color:#0704b6}h1{font-weight:900}@media (max-width:700px){h1,h2,p{display:none}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */